<%- include ('../../partials/header') -%>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
<link rel="stylesheet" type="text/css" href="/stylesheets/courseMappingStyle.css">
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="<%=homeURL%>">Home</a></li>
        <% for( let index = 0; index < breadcrumb.length; index++ ) { %>

        <% if (index == breadcrumb.length -1) { %>
        <li class="breadcrumb-item active" aria-current="page"><%= breadcrumb[index].name %></li>
        <% }else { %>
        <li class="breadcrumb-item">
            <a href="<%= breadcrumb[index].url %>">
                <%= breadcrumb[index].name %>
            </a>
        </li>
        <% } %>

        <% } %>
    </ol>
</nav>

<!-- FILTERING HEADER -->
<div class="container-fluid mt-2" style="border-bottom: 1px solid rgba(0,0,0,0.1);">
    <div class="row">

        <div class="col-12">

            <div class="d-flex flex-row bd-highlight">

                <div class="p-2 bd-highlight">
                    <h3>Select: </h3>
                </div>

                <div class="p-2 bd-highlight">

                    <div class="form-group">
                        <select class="form-control" id="std_program" name="department" type="text">
                            <option selected disabled value=""> -- Study Program -- </option>
                            <% study_program.forEach(each => { %>
                            <option value="<%= each["prog_ID"] %>"> <%= each["prog_name"] %> </option>
                            <% }) %>
                        </select>
                    </div>
                </div>

                <div class="p-2 bd-highlight">

                    <div class="form-group">
                        <select class="form-control" disabled id="outcomes" type="text" name="outcome">
                            <option selected disabled value=""> -- Outcome -- </option>
                        </select>
                    </div>
                </div>

                <div class="p-2 bd-highlight">
                    <div class="form-group">
                        <select id="academic_term" disabled class="form-control" type="text" name="term">
                            <option selected disabled value="">-- Academic Term --</option>
                            <% term.forEach(each => { %>
                            <option value="<%= each["term_ID"] %>"> <%= each["term_name"] %> </option>
                            <% }); %>
                        </select>
                    </div>
                </div>

                <div class="p-2 bd-highlight" style="width: 15%;">
                    <button id="btn_submit" style="width: 100%;" class="btn btn-primary"> Submit</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid" id="tableContainer">
    <!-- <div class="container mt-4">
        <table class="table" id="mytable">
            <thead class="thead-dark">
                <tr>
                    <th colspan="4" scope="col">Assessment name - Outocome Name - Study Program</th>
                </tr>

                <tr>
                    <th scope="col">#</th>
                    <th scope="col">First</th>
                    <th scope="col">Last</th>
                    <th scope="col">Handle</th>
                </tr>
            </thead>
            <tbody>
                <td>
                    1
                </td>
                <td>
                    1
                </td>
                <td>
                    1
                </td>
                <td>
                    1
                </td>

            </tbody>
    </div> -->
</div> 

<button id="button-a">Create Excel</button>

<div class="container">
    <canvas id="myChart" width="400" height="400"></canvas>
</div>

<!-- MODAL FOR FEEDBACK -->
<%- include ('../modal/feedback') -%>

<style>
    table thead {
        text-align: center;
    }

    .table-cont {
        margin-top: 4%;
        margin-bottom: 4%;
    }
</style>


<!-- <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script> -->
<script src="/javascripts/libraries/jquery.table2excel.min.js"></script>
<script src="/javascripts/libraries/xlsx.full.min.js"></script>
<script src="/javascripts/libraries/FileSaver.js"></script>

<script>
    function s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;
        return buf;
    }
    $("#button-a").click(function () {
        var wb = XLSX.utils.table_to_book(document.getElementById('mytable'), { sheet: "Sheet JS" });
        var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });

        saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), 'test.xlsx');
    });

</script>

<script>
    $(function () {
        $("#btnExcel").click(function (e) {
            var table = $(".table");
            if (table && table.length) {
                $(table).table2excel({
                    exclude: ".noExl",
                    name: "Excel Document Name",
                    filename: "myFileName.xls",
                    fileext: ".xls",
                    preserveColors: true
                });
            }
        });
    });
</script>

<script>
    const canvas = document.getElementById('myChart')
    let ctx = canvas.getContext('2d');

    /**
    * Create table 
    */
    function createTable(data, outcome, std) {

        let html = undefined;
        let performances = data["performances"];
        const numPerformances = performances.length;
        const scoreLen = performances[0]["scores"].length;

        // =========================== TABLE CONTAINER =============================

        // Container
        html = `<div class="container mt-4 table-cont">`;

        // table & header
        html += `<table class="table table-bordered">`;

        html += `<thead class="thead-dark">`;

        // =========================== FIRST HEADER =============================
        // + 2 because we add student and outcome result colums
        // first header
        html += `<tr>`;
        html += `<th colspan = "${(numPerformances + 2)}" scope = "col"> ${data["name"]} - ${outcome} - ${std}</th>`;
        // end first header
        html += `</tr>`;

        // =========================== SECOND HEADER =============================
        // second header
        html += `<tr>`;
        html += `<th scope = "col"> Student # </th>`;
        console.log(data["performances"][0]);
        for (let i = 0; i < numPerformances; i++) {

            html += `<th scope = "col"> ${data["performances"][i]["description"]}</th>`;
        }
        html += `<th scope = "col"> Outcome Result</th>`;

        // end second header
        html += `</tr>`;

        // end header
        html += `</thead>`;

        // =========================== BODY DATA =============================
        // table body
        html += `<tbody>`;
        let tr = `<tr>`;
        let outcome_results = []; // store outcome result per row
        for (let i = 0; i < scoreLen; i++) {
            tr = `<tr>`;
            tr += `<th> ${i + 1} </th>`

            let j = 0;
            let outcomeAvg = 0;
            while (j < numPerformances) {
                outcomeAvg += performances[j]["scores"][i];

                tr += `<td> ${performances[j]["scores"][i]} </td>`;
                j++;
            }

            let outcomeAvgRow = (outcomeAvg / numPerformances).toFixed(2);
            outcome_results.push(outcomeAvgRow);

            // row outcome result
            tr += `<td> ${outcomeAvgRow} </td>`;

            html += `</tr>`;
            html += tr;
        }

        tr = `<tr>`;
        tr += `<th> % Student with 3 or more </th>`

        // LAST ROW AVG RESULT
        const acceptedVal = 3;
        for (let i = 0; i < numPerformances; i++) {

            let score = performances[i]["scores"];

            // sum each column of score
            let avg = 0;
            score.map(each => {
                // if the value if grater or equal than the accepted value
                if (each >= acceptedVal) avg++;
            });

            // get percent of student with 3 or more (Only one decimal place)
            avg = ((avg / scoreLen) * 100).toFixed(2);

            tr += `<th> ${avg}% </th>`;
        }

        let otucome_gt_accepted = outcome_results.filter(val => val >= 3).length;
        let outcomeAvgResult = ((otucome_gt_accepted / scoreLen) * 100).toFixed(2);

        tr += `<th> ${outcomeAvgResult}% </th>`;
        html += tr;
        html += `</tr>`;


        // end table body
        html += `</tbody>`;
        // =========================== END TABLE =============================
        // end table
        html += `</table>`;

        // end container
        html += `</div>`;

        html += `<hr>`;

        $("#tableContainer").append(html);
    }


    // tags select
    const tag_studyProgram = "#std_program";
    const tag_outcome = "#outcomes";
    const tag_term = "#academic_term";
    const tag_modal = "#professor_feedback";
    const tag_span_feedback = "#spanFeedback";
    const tag_btn_submit = "#btn_submit";
    const tag_loader_img = "#loader";

    $(document).ready(function () {

        // STUDY PROGRAM
        $(tag_studyProgram).change(async function () {

            // load image: loading
            $(tag_loader_img).show();

            // disable options
            $(tag_outcome).prop("disabled", true);
            $(tag_term).prop("disabled", true);

            let std_id = $(this).val();

            // get outcomes
            let outcomes = await make_request(`/api/get/outcomesByStudyProgramID/${std_id}`).catch((err) => {
                console.error("Error getting outcomes: ", err);
            });

            // validate outcomes
            if (outcomes == undefined || outcomes.length == 0) {
                $(tag_loader_img).hide();
                modal_message("Cannot find any Outcome");
                return;
            }

            // enable outcomes
            $(tag_loader_img).hide();
            $(tag_outcome).prop("disabled", false);
            $(tag_term).prop("disabled", false);
            $(tag_outcome).empty().append('<option selected disabled value=""> -- Outcome -- </option>');
            fill_select(tag_outcome, outcomes);
        });

        // when click submit
        $(tag_btn_submit).click(function () {

            $(tag_loader_img).show();

            let std_id = $(tag_studyProgram).val();
            let outcome_id = $(tag_outcome).val();
            let term_id = $(tag_term).val();

            let outcomeName = $(tag_outcome).children("option:selected").text();
            let studyProgramName = $(tag_studyProgram).children("option:selected").text();

            let message = undefined;

            if (std_id == undefined || std_id == "")
                message = "Please Select Study Program";
            else if (outcome_id == undefined || outcome_id == "")
                message = "Please Select an Outcome";
            else if (term_id == undefined || term_id == "")
                message = "Please Select Academic Term";

            if (message != undefined) {
                $(tag_loader_img).hide();
                modal_message(false, message);
                return;
            }

            // data for request
            let dept_assessment_data = { "study_program_id": std_id, "outcome_id": outcome_id, "term_id": term_id };

            // make request
            $.ajax({
                type: "GET",
                url: "/api/get/departmentAssessment",
                data: { "data": dept_assessment_data },
                success: (response) => {
                    $(tag_loader_img).hide();

                    if (response != undefined && response.error == false) {
                        modal_message(true, "Data was sent");

                        response.data.forEach(each => {
                            createTable(each, outcomeName, studyProgramName);
                        });
                    } else {
                        modal_message(false, "we couldn't find the data you're looking");
                    }
                },
                dataType: "json"
            });

            $(tag_loader_img).hide();

            createTable(80, outcomeName, outcomeName);
        });
    });

    /**
     * @param {bool} error - add class green or red 
     * @param {String} message - message for the modal 
     */
    function modal_message(success, message) {
        $(tag_modal).modal("show");

        if (success) {
            $("#feedbackTitle").text("Success!");
            $(tag_span_feedback).css({ "color": "green" });
        } else {
            $("#feedbackTitle").text("Sorry!");
            $(tag_span_feedback).css({ "color": "red" });
        }

        $(tag_span_feedback).text(message);
    }

    /**
     * @param {String} tag - tag name - ID 
     * @param {Array} values - values for tag name
     */
    function fill_select(tag, values) {
        values.forEach(each => {
            $(tag).append(`<option value="${each['value']}"> ${each['name']}</option>`);
        });
    }


    function createTable(graphData, labels, title) {
        let myChart = new Chart(canvas, {
		type: 'bar',
		data: {
			labels: labels,
			datasets: [
				{
					label: title,
					data: graphData,
					backgroundColor: 'rgba(58, 166, 87, 0.2)', // Need to make where now matter the amount of PC it can make amou
				},
			]
		},
		showTooltips: false,
		options: {
			scales: {
				yAxes: [{
					ticks: {
						beginAtZero: true,
						max: 100
					}
				}]
			},
			responsive: true,
			animation: {
				duration: 1,
				onComplete: () => {
					// graph = myChart.toBase64Image();
				}
			}
		}	
	});
    }


</script>

<%- include ('../../partials/footer') -%>